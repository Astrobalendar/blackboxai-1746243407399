version: '3.8'

# Network for all services to communicate
networks:
  astrobalendar-network:
    driver: bridge

# Volumes for persistent data
volumes:
  mongo-data:
  redis-data:
  mongo-express-data:

# Services
services:
  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: astrobalendar-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_BACKEND_URL=http://backend:3001
      - VITE_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY:-}
      - VITE_SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/frontend/node_modules
    depends_on:
      - backend
    networks:
      - astrobalendar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    container_name: astrobalendar-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URI=mongodb://mongodb:27017/astrobalendar
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-dev-jwt-secret}
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/backend/node_modules
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - astrobalendar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=astrobalendar
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-password}
    volumes:
      - mongo-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - astrobalendar-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.runCommand({ ping: 1 }).ok'"]
      interval: 30s
      timeout: 30s
      retries: 3

  # MongoDB Web UI
  mongo-express:
    image: mongo-express:1.0
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME:-admin}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-password}
      - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
      - mongodb
    networks:
      - astrobalendar-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - astrobalendar-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    networks:
      - astrobalendar-network

  # Traefik for reverse proxy (optional)
  # Uncomment if you want to use Traefik
  # traefik:
  #   image: traefik:v2.10
  #   container_name: traefik
  #   command:
  #     - "--api.insecure=true"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #   ports:
  #     - "80:80"
  #     - "8080:8080" # Dashboard
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   networks:
  #     - astrobalendar-network
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
  #     - "traefik.http.routers.traefik.service=api@internal"
  #     - "traefik.http.routers.traefik.entrypoints=web"
  #     - "traefik.http.routers.traefik.middlewares=auth"
  #     - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$ruca84Hq$$mbjdMxzA4U8WjGghYv7tJ0" # user:password

# Add these labels to other services to enable Traefik routing:
# labels:
#   - "traefik.enable=true"
#   - "traefik.http.routers.your-service.rule=Host(`your-service.localhost`)"
#   - "traefik.http.routers.your-service.entrypoints=web"
