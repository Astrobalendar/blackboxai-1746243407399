# Render Blueprint for Astrobalendar
# Docs: https://render.com/docs/blueprint-spec

services:
  # Backend Service
  - type: web
    name: astrobalendar-backend
    region: oregon
    runtime: python
    buildCommand: |
      # Install Rust and Cargo
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      export PATH="$HOME/.cargo/bin:$PATH"
      rustc --version
      cargo --version
      
      # Set up Node.js 18
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      nvm install 18
      nvm use 18
      
      # Update npm to latest
      npm install -g npm@latest
      
      # Set up Python environment
      python -m venv .venv
      source .venv/bin/activate
      
      # Install build dependencies
      pip install --upgrade pip setuptools wheel
      
      # Install Python build dependencies
      sudo apt-get update && sudo apt-get install -y --no-install-recommends \
        gcc \
        python3-dev \
        libpq-dev \
        build-essential \
        && rm -rf /var/lib/apt/lists/*
      
      # Install Python dependencies
      cd apps/backend
      pip install -r requirements.txt
      
      # Install Node.js dependencies for backend (if any)
      if [ -f "package.json" ]; then
        npm ci --legacy-peer-deps --production
      fi
      
      # Install build dependencies for Python packages
      sudo apt-get update && sudo apt-get install -y --no-install-recommends \
        gcc \
        python3-dev \
        libpq-dev \
        && rm -rf /var/lib/apt/lists/*
      
      # Optional: Install frontend dependencies if needed for backend
      # cd ../../apps/frontend
      # npm ci --legacy-peer-deps
      # npm run build
      # cd ../../
    startCommand: >-
      # Activate Python virtual environment
      source .venv/bin/activate
      
      # Set Python path
      export PYTHONPATH="${PYTHONPATH}:/opt/render/project/src"
      
      # Start Gunicorn with Uvicorn worker
      gunicorn apps.backend.main:app \
        --workers 4 \
        --worker-class uvicorn.workers.UvicornWorker \
        --bind 0.0.0.0:$PORT \
        --timeout 120 \
        --keep-alive 5 \
        --worker-tmp-dir /dev/shm \
        --log-level=info \
        --access-logfile - \
        --error-logfile -
    envVars:
      - key: PORT
        value: 10000
      - key: PYTHONPATH
        value: /opt/render/project/src
      - key: ENVIRONMENT
        value: production
      - key: LOG_LEVEL
        value: INFO
      # Firebase Configuration (set in Render dashboard)
      - key: FIREBASE_SERVICE_ACCOUNT_JSON
        sync: false
      - key: FIREBASE_API_KEY
        sync: false
      - key: FIREBASE_AUTH_DOMAIN
        sync: false
      - key: FIREBASE_PROJECT_ID
        sync: false
      - key: FIREBASE_STORAGE_BUCKET
        sync: false
      - key: FIREBASE_MESSAGING_SENDER_ID
        sync: false
      - key: FIREBASE_APP_ID
        sync: false
      - key: FIREBASE_MEASUREMENT_ID
        sync: false
      # Redis Configuration
      - key: REDIS_URL
        fromService:
          type: redis
          name: astrobalendar-redis
          property: connectionString
    healthCheckPath: /health
    autoDeploy: true
    plan: free
    scaling:
      maxInstances: 1
      minInstances: 1
      concurrency: 1

  # Redis Service
  - type: redis
    name: astrobalendar-redis
    plan: free
    ipAllowList: []

# Environment Variables (for development)
# Note: These are just for reference, set them in Render dashboard
# PYTHONUNBUFFERED=1
# PYTHONDONTWRITEBYTECODE=1

# Cron Jobs (uncomment and configure as needed)
# jobs:
#   - name: update-daily-horoscopes
#     type: cron
#     schedule: "0 0 * * *"  # Run daily at midnight
#     command: >
#       cd apps/backend &&
#       python -m scripts.update_horoscopes
#     envVars:
#       - key: ENVIRONMENT
#         value: production
#     plan: free
